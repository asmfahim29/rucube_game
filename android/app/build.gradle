plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// Load key.properties for signing configuration
def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def dartEnvironmentVariables = [
    APP_FLAVOR: project.hasProperty('flavorType')
]

if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables +
        project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                if (pair.first() == 'flavorType') {
                  project.ext.APP_FLAVOR = pair.last()
                }
                [(pair.first()): pair.last()]
            }
}

def appFlavor() {
  if (project.hasProperty('APP_FLAVOR')) {
    return "${project.ext.APP_FLAVOR}_"
  }
}


android {
    namespace = "com.example.rucube_game"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.rucube_game"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }


    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            // Use release signing config if key.properties exists, otherwise use debug
            signingConfig keystorePropertiesFile.exists() ? signingConfigs.release : signingConfigs.debug
        }
}

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if(appFlavor() != null){
                 def appName = variant.getMergedFlavor().applicationId
                 int lastIndex = appName.lastIndexOf('.')
                 def modifiedAppName = lastIndex != -1 ? appName.substring(lastIndex + 1) : appName
                 outputFileName = "${modifiedAppName}_${appFlavor()}${versionName}(${versionCode}).apk"
                 renamePath(outputFileName)
            }
        }
    }

}

flutter {
    source = "../.."
}